#ifndef QGF_GRAPHICS_COLOR_H
#define QGF_GRAPHICS_COLOR_H 1
#include "qgf/types.h"
//==============================================================================================
// ** Color Class
//----------------------------------------------------------------------------------------------
// This class is used for Color.
//----------------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	// GC functions
	//--------------------------------------------------------------------------------------
	static ruby_value
	rb_gc_cColor_alloc(ruby_value klass);
	static void 
	rb_gc_cColor_free(TColor* color);
	static void 
	rb_gc_cColor_mark(TColor* color);
	//--------------------------------------------------------------------------------------
	// * Color#initialize
	// * Color#initialize(color)
	// * Color#initialize(red, green, blue[, alpha])
	// Creates a new color.
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - color : The color to copy.
	// - red   : The red component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - green : The green component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - blue  : The blue component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - alpha : The alpha component from 0 to 255. if < 0 then 0; if > 255 then 255;
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_initialize(int size, ruby_value* args, ruby_value self);
	//--------------------------------------------------------------------------------------
	// * Color#set(color)
	// * Color#set(red, green, blue[, alpha])
	// Sets the components of a color.
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - color : The color to copy.
	// - red   : The red component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - green : The green component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - blue  : The blue component from 0 to 255. if < 0 then 0; if > 255 then 255;
	// - alpha : The alpha component from 0 to 255. if < 0 then 0; if > 255 then 255;
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_set(int size, ruby_value* args, ruby_value self);
	//--------------------------------------------------------------------------------------
	// * Color#red=(value)
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - value :
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_SETred(ruby_value self, ruby_value value);
	//--------------------------------------------------------------------------------------
	// * Color#green=(value)
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - value :
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_SETgreen(ruby_value self, ruby_value value);
	//--------------------------------------------------------------------------------------
	// * Color#blue=(value)
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - value :
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_SETblue(ruby_value self, ruby_value value);
	//--------------------------------------------------------------------------------------
	// * Color#alpha=(value)
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - value :
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_SETalpha(ruby_value self, ruby_value value);
	//--------------------------------------------------------------------------------------
	// * Color#red
	//-------------------------------------------------------------------------------------
	// Parameters:
	// - value :
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_GETred(ruby_value self);
	//--------------------------------------------------------------------------------------
	// * Color#green
	//-------------------------------------------------------------------------------------
	// Parameters:
	// None.
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_GETgreen(ruby_value self);
	//--------------------------------------------------------------------------------------
	// * Color#blue
	//-------------------------------------------------------------------------------------
	// Parameters:
	// None.
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_GETblue(ruby_value self);
	//--------------------------------------------------------------------------------------
	// * Color#alpha
	//-------------------------------------------------------------------------------------
	// Parameters:
	// None.
	//_____________________________________________________________________________________
	static ruby_value 
	rb_cColor_GETalpha(ruby_value self);
	//======================================================================================
	// Marshalling
	//======================================================================================
	static ruby_value 
	rb_cColor__dump(ruby_value self);
	static ruby_value 
	rb_cColorCLASS__load(ruby_value self, ruby_value str);
	//======================================================================================
	static ruby_value rb_cColor;
	//======================================================================================
	void
	Init_QGF_Graphics_Color();

#endif
